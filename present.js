document.addEventListener("DOMContentLoaded", function () {
  // Hi·ªáu ·ª©ng tr√°i tim bay
  function createHearts() {
    const container = document.getElementById("heartsContainer");
    const heartsCount = 30;

    for (let i = 0; i < heartsCount; i++) {
      const heart = document.createElement("div");
      heart.innerHTML = "‚ù§";
      heart.classList.add("heart");
      heart.style.left = Math.random() * 100 + "vw";
      heart.style.top = Math.random() * 100 + "vh";
      const size = Math.random() * 2 + 1;
      heart.style.fontSize = size + "rem";
      const duration = Math.random() * 6 + 4;
      heart.style.animation = `float ${duration}s linear infinite`;
      container.appendChild(heart);
    }
  }

  createHearts();

  // Kh·ªüi t·∫°o h√†nh tr√¨nh
  const startJourneyBtn = document.getElementById("startJourneyBtn");
  const calendarContainer = document.getElementById("calendarContainer");
  const footer = document.getElementById("footer");
  const journeyInfo = document.getElementById("journeyInfo");
  const giftBox = document.getElementById("giftBox");
  const daysContainer = document.getElementById("daysContainer");
  const passwordModal = document.getElementById("passwordModal");
  const passwordInput = document.getElementById("passwordInput");
  const passwordError = document.getElementById("passwordError");
  const passwordSubmit = document.getElementById("passwordSubmit");
  const passwordCancel = document.getElementById("passwordCancel");
  const giftMessageContainer = document.getElementById("giftMessageContainer");
  const giftMessageText = document.getElementById("giftMessageText");
  const dailyGreeting = document.getElementById("dailyGreeting");
  const greetingContainer = document.getElementById("greetingContainer");
  const header = document.getElementById("header");

  let currentDay = 1;
  const totalDays = 12;
  let journeyStarted = false;
  let journeyStartDate = null;
  let previewDay = 0; // Ng√†y mu·ªën xem tr∆∞·ªõc

  // M·∫≠t kh·∫©u xem tr∆∞·ªõc
  const PREVIEW_PASSWORD = "lalala";

  // Ng√†y b·∫Øt ƒë·∫ßu c·ªë ƒë·ªãnh: 16/6
  const fixedStartDate = new Date(new Date().getFullYear(), 5, 16);

  // X√°c ƒë·ªãnh l·ªùi ch√∫c theo bu·ªïi trong ng√†y
  function getTimeGreeting() {
    const now = new Date();
    const hours = now.getHours();
    const greetings = [
      "Ch√∫c em bu·ªïi s√°ng tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng v√† ni·ªÅm vui! üåû",
      "Ch√∫c em b·ªØa tr∆∞a ngon mi·ªáng v√† th∆∞ gi√£n nh√©! üç≤",
      "Bu·ªïi chi·ªÅu l√†m vi·ªác hi·ªáu qu·∫£ v√† nh·ªõ ngh·ªâ ng∆°i em nh√©! ‚òï",
      "Ch√∫c em bu·ªïi t·ªëi ·∫•m √°p, b·ªØa t·ªëi ngon mi·ªáng v√† nh·ªõ ng·ªß s·ªõm nh√©! üåô",
      "Ch√∫c em ng·ªß ngon v√† c√≥ nh·ªØng gi·∫•c m∆° ƒë·∫πp! üí§",
    ];

    if (hours >= 5 && hours < 11) return greetings[0];
    if (hours >= 11 && hours < 14) return greetings[1];
    if (hours >= 14 && hours < 18) return greetings[2];
    if (hours >= 18 && hours < 21) return greetings[3];
    return greetings[4];
  }

  // Hi·ªÉn th·ªã l·ªùi ch√∫c h√†ng ng√†y
  function showDailyGreeting() {
    dailyGreeting.textContent = getTimeGreeting();
  }

  // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu h√†nh tr√¨nh trong localStorage kh√¥ng
  function loadJourneyState() {
    const savedState = localStorage.getItem("loveJourney");
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        journeyStarted = state.started;
        journeyStartDate = new Date(state.startDate);

        if (journeyStarted) {
          currentDay = calculateCurrentDay();
          updateJourneyInfo();

          journeyInfo.textContent = `H√†nh tr√¨nh ƒë√£ b·∫Øt ƒë·∫ßu t·ª´ ng√†y ${journeyStartDate.toLocaleDateString(
            "vi-VN"
          )}`;

          // TH√äM 2 D√íNG N√ÄY ƒê·ªÇ ·∫®N GREETING KHI LOAD L·∫†I TRANG
        }
      } catch (e) {
        console.error("L·ªói khi load tr·∫°ng th√°i:", e);
        localStorage.removeItem("loveJourney");
      }
    }
  }

  // T√≠nh to√°n ng√†y hi·ªán t·∫°i trong h√†nh tr√¨nh
  function calculateCurrentDay() {
    const today = new Date();
    const startDate = journeyStartDate;

    //Reset gi·ªù ƒë·ªÉ so s√°nh ch√≠nh x√°c ng√†y
    today.setHours(0, 0, 0, 0);
    startDate.setHours(0, 0, 0, 0);

    // T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua
    const timeDiff = today.getTime() - startDate.getTime();
    const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24)) + 1;

    return Math.max(1, Math.min(totalDays, daysDiff));
  }

  // L∆∞u tr·∫°ng th√°i h√†nh tr√¨nh v√†o localStorage
  function saveJourneyState() {
    const state = {
      started: journeyStarted,
      startDate: journeyStartDate,
    };
    localStorage.setItem("loveJourney", JSON.stringify(state));
  }

  // Hi·ªÉn th·ªã giao di·ªán h√†nh tr√¨nh
  function showCalendar() {
    // Hi·ªÉn th·ªã ph·∫ßn h√†nh tr√¨nh
    calendarContainer.style.display = "block";
    footer.style.display = "block";

    // K√≠ch ho·∫°t hi·ªáu ·ª©ng
    setTimeout(() => {
      calendarContainer.classList.add("visible");
      footer.classList.add("visible");
    }, 10);

    createDayCards();
    updateCounters();

    // M·ªü qu√† c·ªßa ng√†y hi·ªán t·∫°i
    openGift(currentDay, false);
  }

  // C·∫≠p nh·∫≠t th√¥ng tin h√†nh tr√¨nh
  function updateJourneyInfo() {
    if (journeyStartDate) {
      const options = { day: "numeric", month: "long", year: "numeric" };
      const startDateStr = journeyStartDate.toLocaleDateString(
        "vi-VN",
        options
      );
      journeyInfo.textContent = `H√†nh tr√¨nh b·∫Øt ƒë·∫ßu ng√†y ${startDateStr}`;
    }
  }

  // T·∫°o c√°c th·∫ª ng√†y
  function createDayCards() {
    daysContainer.innerHTML = "";

    for (let day = 1; day <= totalDays; day++) {
      const dayElement = document.createElement("div");
      dayElement.className = "day-card";
      dayElement.innerHTML = `
                        <div class="day-number">${day}</div>
                        <div class="day-status">${
                          day < currentDay
                            ? "ƒê√£ m·ªü"
                            : day === currentDay
                            ? "H√¥m nay"
                            : "Ch∆∞a m·ªü"
                        }</div>
                    `;

      if (day <= currentDay) {
        dayElement.classList.add("active");
        dayElement.addEventListener("click", function () {
          openGift(day, false);
        });
      } else {
        dayElement.classList.add("locked");

        const previewButton = document.createElement("button");
        previewButton.textContent = "üëÅÔ∏è Xem tr∆∞·ªõc";
        previewButton.style.marginTop = "8px";
        previewButton.style.padding = "5px 10px";
        previewButton.style.border = "none";
        previewButton.style.borderRadius = "10px";
        previewButton.style.cursor = "pointer";
        previewButton.style.background = "#fff";
        previewButton.style.color = "#8a2be2";
        previewButton.style.fontWeight = "bold";
        previewButton.addEventListener("click", function (e) {
          e.stopPropagation();
          showPasswordModal(day);
        });

        dayElement.appendChild(previewButton);
      }

      daysContainer.appendChild(dayElement);
    }
  }

  // Hi·ªÉn th·ªã modal nh·∫≠p m·∫≠t kh·∫©u
  function showPasswordModal(day) {
    previewDay = day;
    passwordInput.value = "";
    passwordError.style.display = "none";
    passwordModal.classList.add("active");
    passwordInput.focus();
  }

  // ·∫®n modal nh·∫≠p m·∫≠t kh·∫©u
  function hidePasswordModal() {
    passwordModal.classList.remove("active");
  }

  // C·∫≠p nh·∫≠t b·ªô ƒë·∫øm
  function updateCounters() {
    document.getElementById("daysPassed").textContent = currentDay - 1;
    document.getElementById("daysLeft").textContent =
      totalDays - (currentDay - 1);
    document.getElementById("giftsOpened").textContent = currentDay - 1;
    document.getElementById(
      "currentDate"
    ).textContent = `Ng√†y th·ª© ${currentDay} trong h√†nh tr√¨nh`;
  }

  // M·ªü qu√†
  function openGift(day, isPreview = false) {
    const gift = gifts[day];
    if (gift) {
      const dayNumber = document.querySelector(".gift-front .day-number");
      const giftImageDiv = document.querySelector(".gift-image-fullscreen");

      giftImageDiv.style.opacity = "1";
      giftImageDiv.style.display = "flex";
      giftImageDiv.style.alignItems = "center";
      giftImageDiv.style.justifyContent = "center";

      dayNumber.textContent = day;
      const giftImageTag = document.getElementById("giftImage");

      if (typeof gift.image === "object") {
        giftImageTag.src = gift.image.src;
        giftImageTag.alt = gift.image.alt || "·∫¢nh qu√† t·∫∑ng";
      } else {
        giftImageTag.src = gift.image;
        giftImageTag.alt = "·∫¢nh qu√† t·∫∑ng";
      }

      if (!giftBox.classList.contains("opened")) {
        giftBox.classList.add("opened");
      }

      giftBox.scrollIntoView({ behavior: "smooth", block: "center" });

      // CH·ªà HI·ªÇN TH·ªä TIN NH·∫ÆN QU√Ä (ƒê√É X√ìA L·ªúI CH√öC THEO BU·ªîI)
      giftMessageText.textContent = gift.message;
      giftMessageContainer.classList.add("visible");

      if (isPreview) {
        alert(`(ƒê√¢y l√† b·∫£n xem tr∆∞·ªõc c·ªßa ng√†y ${day})`);
      }
    }
  }

  // D·ªØ li·ªáu qu√† t·∫∑ng
  const gifts = {
    1: {
      image: {
        src: "images/d·∫πp1.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Ng√†y ƒë·∫ßu ti√™n c·ªßa h√†nh tr√¨nh r·ªìi n√® ! HEHEHEHüòÅ. ",
    },
    2: {
      image: {
        src: "images/dep2.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "B·∫Øt ƒë·∫ßu th·∫•y nh·ªõ a ch∆∞aaa.üòÅ.",
    },
    3: {
      image: {
        src: "images/dep3.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "C·ªë l√™n nh√©eeü•≥. ",
    },
    4: {
      image: {
        src: "images/dep4.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "N·∫øu c·∫£m th·∫•y nh·ªõ r th√¨ nh·∫Øn a ikkkkküòá.",
    },
    5: {
      image: {
        src: "images/dep5.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Tr·ª• ƒë·∫øn ƒë∆∞·ª£c lu√¥n r h·∫£ ü§£. ",
    },
    6: {
      image: {
        src: "images/dep6.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Saoo l√¢u qu√°aaüòµ‚Äçüí´üòµ‚Äçüí´.",
    },
    7: {
      image: {
        src: "images/dep7.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "M√∫nnn nh·∫Ønnn e qu√°aa üòµ‚Äçüí´.",
    },
    8: {
      image: {
        src: "images/dep12.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Heyyy heyyy!! B·ªãt m·∫∑t l·∫°iiiiüòñ.",
    },
    9: {
      image: {
        src: "images/dep9.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "·ª∞aaa!!! L√¢u qu√°aaüòñ.",
    },
    10: {
      image: {
        src: "images/dep10.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Mai ƒë·∫øn ng√†y thi r·ªìi ·∫•yy!!! C·ªë l√™n nh√©eeeüòáüòá... A tin eeeüí™üí™.",
    },
    11: {
      image: {
        src: "images/dep11.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Qua ƒë∆∞·ª£c 1 ng√†y thi r!! E ƒÉn u·ªëng ngh·ªâ ng∆°i ƒëi hennnüòòüòò.",
    },
  
    12: {
      image: {
        src: "images/dep8.png",
        alt: "Xinh ƒë·∫πp",
      },
      message:
        "Ch√∫c m·ª´ng e ƒë√£ v∆∞·ª£t k√¨ thi t·ªët ƒë·∫πpü•≥ü•≥.",
    },  
  };
  // B·∫Øt ƒë·∫ßu h√†nh tr√¨nh
  startJourneyBtn.addEventListener("click", function () {
    // Ktra xem n√∫t c√≥ b·ªã disabled kh√¥ng
    if (this.disabled) return;

    journeyStarted = true;
    journeyStartDate = fixedStartDate; // S·ª≠ d·ª•ng ng√†y c·ªë ƒë·ªãnh 16/6
    currentDay = calculateCurrentDay();

    showCalendar();
    updateJourneyInfo();
    saveJourneyState();

    //V√¥ hi·ªáu h√≥a n√∫t sau khi click
    this.disabled = true;
    this.textContent = "H√†nh Tr√¨nh ƒê√£ B·∫Øt ƒê·∫ßu";

    //·∫®n l·ªùi ch√∫c sau khi nh·∫•n n√∫t
    greetingContainer.style.display = "none";
  });

  // X·ª≠ l√Ω click v√†o h·ªôp qu√† l·ªõn
  giftBox.addEventListener("click", function () {
    if (journeyStarted && !this.classList.contains("opened")) {
      this.classList.add("opened");
      openGift(currentDay, false);
    }
  });

  // X·ª≠ l√Ω m·∫≠t kh·∫©u
  passwordSubmit.addEventListener("click", function () {
    if (passwordInput.value === PREVIEW_PASSWORD) {
      hidePasswordModal();
      openGift(previewDay, true);
    } else {
      passwordError.style.display = "block";
      passwordInput.focus();
    }
  });

  passwordCancel.addEventListener("click", hidePasswordModal);

  passwordInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      passwordSubmit.click();
    }
  });

  // Hi·ªÉn th·ªã l·ªùi ch√∫c khi t·∫£i trang
  showDailyGreeting();

  // T·∫£i tr·∫°ng th√°i n·∫øu c√≥
  loadJourneyState();
});
